generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL="prisma+postgres://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiMDJjMWIwZDEtMmZkOC00MGQ0LTkxYjktYTdiMDU3ZDhiZDdkIiwidGVuYW50X2lkIjoiMDQyNjU4ZTc2YjM1ZmY2NTE2MTQyMzFhYThlYzgxZjY1OWE0ZDBkMmU1ZmEyMjA4ODVmYTY1MTY5MTdkYjRmNSIsImludGVybmFsX3NlY3JldCI6ImQwODA5NzVjLWY4N2UtNDU0MC04YjhjLTIzYTM1ZTY2ZGZiMyJ9.JfORjwmP7pQSyGVY-hfSQ3ZI3ALYxe4Rd-R628km74k"")
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Float
  sizes     String
  stock     Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  course         String?
  year           String?
  studentNumber  String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  orders         Order[]
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  quantity      Int
  size          String
  totalPrice    Float
  status        String   @default("pending")
  paymentProof  String?
  pickupDate    DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}